Contexto Geral para a IDE:
"Vamos iniciar o desenvolvimento do Painel Administrativo seguro, conforme PRD Fase 3, item 5. O foco inicial será a autenticação da equipe e o CRUD (Criar, Ler, Atualizar, Deletar) para os Eventos da Agenda. Utilizaremos a autenticação do Supabase e Supabase Edge Functions protegidas para as operações de escrita."

Passo 1: Configuração da Autenticação no Supabase

Ação do Desenvolvedor (Painel Supabase):
Habilite a Autenticação no seu projeto Supabase.
Configure provedores de login (ex: Email/Senha).
Crie manualmente alguns usuários de teste para a equipe com as roles desejadas (você pode adicionar roles customizadas no Supabase ou gerenciar via custom_claims em JWTs).
Passo 2: Frontend - Página de Login para o Painel Admin
Para a IDE (React - TypeScript):
"Crie uma página de login para o painel administrativo em src/pages/admin/AdminLoginPage.tsx.

Deve conter campos para email e senha.
Utilize o cliente Supabase JS (@supabase/supabase-js) para realizar o login (signInWithPassword).
Após o login bem-sucedido, redirecione para uma página inicial do painel (ex: /admin/dashboard ou /admin/agenda).
Gerencie o estado de autenticação (ex: usando React Context ou Zustand) para proteger as rotas do admin.
Adicione a rota /admin/login em src/App.tsx."
Passo 3: Backend - Edge Functions Protegidas para CRUD de Eventos
Para a IDE (Supabase Edge Functions - TypeScript/Deno):
"Crie novas Edge Functions para gerenciar os eventos da agenda (ou modifique a existente se preferir separar as lógicas de leitura pública e escrita protegida):

create-evento: Método POST, recebe dados do evento, insere na tabela eventos. Requer autenticação e role específica.
update-evento: Método PUT, recebe ID do evento e dados para atualizar. Requer autenticação e role específica.
delete-evento: Método DELETE, recebe ID do evento para excluir. Requer autenticação e role específica.
Exemplo de Estrutura para uma Edge Function Protegida (ex: create-evento/index.ts):

TypeScript

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = { /* ... */ };

async function handleProtectedRequest(req: Request, supabaseClient: SupabaseClient, user: any) {
  // Verifique a role do usuário (ex: if (user.app_metadata.roles?.includes('admin_agenda')))
  // Prossiga com a lógica de criação/atualização/deleção
  // ...
  // Exemplo para criar um evento:
  // const eventoData = await req.json();
  // const { data, error } = await supabaseClient.from('eventos').insert(eventoData).select();
  // if (error) throw error;
  // return new Response(JSON.stringify(data), { headers: { ... }, status: 201 });
}

serve(async (req: Request) => {
  if (req.method === 'OPTIONS') { /* ... */ }

  try {
    const supabaseAdminClient = createClient( // Use o service_role key para operações de admin que bypassam RLS se necessário, ou confie no RLS com o user context
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? "" // CUIDADO: Service Role Key no client-side é um risco. Idealmente, a Edge Function usa o JWT do usuário para interagir com o DB sob as políticas de RLS do usuário.
    );

    // Obter o token JWT do header Authorization
    // const authHeader = req.headers.get("Authorization");
    // if (!authHeader) return new Response(JSON.stringify({ error: "Missing auth token" }), { status: 401, headers: corsHeaders });
    // const token = authHeader.replace("Bearer ", "");
    // const { data: { user }, error: userError } = await supabaseAdminClient.auth.getUser(token); // Usar cliente com anon key para getUser se o adminClient é service_role

    // Para simplificar, vamos assumir que a autenticação é validada por um gateway ou RLS
    // Na prática, você validaria o JWT e as roles aqui.

    // A lógica abaixo é um placeholder, você precisará de uma forma de obter o usuário autenticado e suas permissões.
    // Supabase Edge Functions podem acessar o JWT do usuário se a função for chamada com o token de acesso do usuário.
    // Se a função é chamada pelo frontend autenticado, o Supabase Client JS já envia o token.
    // A Edge Function pode então usar `supabaseClient.auth.getUser()` para obter o usuário.

    // Exemplo de como pegar o usuário a partir do token na requisição:
    const tempSupabaseClientForAuth = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_ANON_KEY") ?? "" // Use anon key para introspecção de token
    );
    const authHeader = req.headers.get('Authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return new Response(JSON.stringify({ error: 'Unauthorized: Missing or invalid token' }), { status: 401, headers: corsHeaders });
    }
    const token = authHeader.split(' ')[1];
    const { data: { user }, error: userError } = await tempSupabaseClientForAuth.auth.getUser(token);

    if (userError || !user) {
        return new Response(JSON.stringify({ error: 'Unauthorized: Invalid token or user not found' }), { status: 401, headers: corsHeaders });
    }
    
    // Aqui você pode verificar as roles do usuário, por exemplo:
    // const userRoles = user.app_metadata?.roles || [];
    // if (!userRoles.includes('admin_agenda')) {
    //     return new Response(JSON.stringify({ error: 'Forbidden: Insufficient permissions' }), { status: 403, headers: corsHeaders });
    // }

    // Prossiga para a lógica de escrita, agora com o contexto do usuário autenticado
    // Para operações de escrita, use o cliente Supabase que implicitamente usará o token do usuário autenticado
    // garantindo que as políticas de RLS sejam aplicadas corretamente.
    const supabaseUserClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_ANON_KEY") ?? "", // Ou a service key se for uma operação que necessita bypassar RLS temporariamente (cuidado!)
      { global: { headers: { Authorization: `Bearer ${token}` } } } // Passa o token do usuário para o client
    );

    if (req.method === 'POST') { // create-evento
        const eventoData = await req.json();
        // Adicionar validação dos dados aqui (Zod, etc.)
        const { data, error } = await supabaseUserClient.from('eventos').insert(eventoData).select().single(); // .single() para retornar o objeto
        if (error) throw error;
        return new Response(JSON.stringify(data), { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 201 });
    }
    // Implementar PUT e DELETE similarmente

    return new Response(JSON.stringify({ error: "Método não suportado" }), { status: 405, headers: corsHeaders });

  } catch (err) { /* ... */ }
});
Ações do Desenvolvedor: Implementar, deployar e testar essas Edge Functions. Atualizar as políticas de RLS nas tabelas eventos e projetos_lei para permitir escrita apenas por usuários autenticados com as roles corretas (ex: authenticated ou uma role customizada como gestor_conteudo).

Exemplo de Política RLS para INSERT na tabela eventos (requer uma função para checar role):

SQL

-- Supondo que você adicione roles ao metadata do usuário (ex: 'admin_agenda')
-- Você pode precisar criar uma função auxiliar no PostgreSQL para ler essas roles do JWT
-- CREATE OR REPLACE FUNCTION get_my_roles() RETURNS text[] AS $$
-- DECLARE
--  roles text[];
-- BEGIN
--  SELECT coalesce(auth.jwt()->'app_metadata'->>'roles', '{}')::text[] INTO roles;
--  RETURN roles;
-- END;
-- $$ LANGUAGE plpgsql SECURITY DEFINER;

-- CREATE POLICY "Permitir inserção de eventos por admin_agenda"
-- ON public.eventos
-- FOR INSERT
-- TO authenticated -- Ou TO <role_especifica_supabase>
-- WITH CHECK ('admin_agenda' = ANY (get_my_roles()));
Atenção: A gestão de roles e RLS para escrita é um tópico complexo. A abordagem mais simples inicialmente é permitir a escrita para qualquer usuário autenticado (TO authenticated WITH CHECK (true)) e refinar depois, ou usar a SERVICE_ROLE_KEY nas Edge Functions com extrema cautela e validação robusta da identidade/permissão do chamador. O ideal é usar o RLS baseado no JWT do usuário.

Passo 4: Frontend - Interface CRUD para Agenda no Painel Admin
Para a IDE (React - TypeScript):
"Crie as páginas e componentes para o CRUD de Eventos no painel administrativo:

Página /admin/agenda (src/pages/admin/AdminAgendaPage.tsx):
Listar os eventos (pode reutilizar WorkspaceEventos ou criar uma versão para admin que traga todos, não apenas os públicos).
Botão "Novo Evento" que leve a /admin/agenda/novo.
Para cada evento listado, botões para "Editar" (leva a /admin/agenda/editar/:id) e "Excluir".
Página/Componente Formulário de Evento (src/components/admin/EventoForm.tsx):
Formulário com campos para todos os atributos de um evento.
Usar react-hook-form e zod para validação.
Função onSubmit que chama a Edge Function create-evento ou update-evento.
Páginas /admin/agenda/novo e /admin/agenda/editar/:id:
Renderizar o EventoForm. A página de edição buscará os dados do evento pelo ID para popular o formulário.
Lógica de Exclusão:
Ao clicar em "Excluir", mostrar um diálogo de confirmação (AlertDialog) e, se confirmado, chamar a Edge Function delete-evento.
Proteja todas as rotas /admin/* para que apenas usuários autenticados possam acessá-las."
